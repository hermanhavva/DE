-> Nested loop inner join  (cost=458554 rows=0) (actual time=1.45e+6..1.45e+6 rows=23 loops=1)
    -> Covering index scan on e using hireDate_non_clustered_index  (cost=2.55 rows=23) (actual time=0.301..0.901 rows=23 loops=1)
    -> Index lookup on ipe using <auto_key0> (EmployeeID=e.employeeid)  (cost=2.75..20286 rows=79748) (actual time=63142..63142 rows=1 loops=23)
        -> Materialize CTE income_per_employee  (cost=2.5..2.5 rows=0) (actual time=1.45e+6..1.45e+6 rows=23 loops=1)
            -> Table scan on <temporary>  (cost=2.5..2.5 rows=0) (actual time=1.45e+6..1.45e+6 rows=23 loops=1)
                -> Temporary table with deduplication  (cost=0..0 rows=0) (actual time=1.45e+6..1.45e+6 rows=23 loops=1)
                    -> Window aggregate with buffering: sum(income_per_product_per_sales_person.incomePerProductPerSalesPerson) OVER (PARTITION BY ipppsp.EmployeeID )   (actual time=1.45e+6..1.45e+6 rows=10396 loops=1)
                        -> Sort: ipppsp.EmployeeID  (cost=5.1..5.1 rows=0) (actual time=1.45e+6..1.45e+6 rows=10396 loops=1)
                            -> Table scan on ipppsp  (cost=5..5 rows=0) (actual time=1.45e+6..1.45e+6 rows=10396 loops=1)
                                -> Materialize CTE income_per_product_per_sales_person  (cost=2.5..2.5 rows=0) (actual time=1.45e+6..1.45e+6 rows=10396 loops=1)
                                    -> Table scan on <temporary>  (cost=2.5..2.5 rows=0) (actual time=1.45e+6..1.45e+6 rows=10396 loops=1)
                                        -> Temporary table with deduplication  (cost=0..0 rows=0) (actual time=1.45e+6..1.45e+6 rows=10396 loops=1)
                                            -> Window aggregate with buffering: sum(sales.quantity) OVER (PARTITION BY e.employeeid,e.firstname,e.lastname,p.productid,p.price )   (actual time=1.35e+6..1.45e+6 rows=6.76e+6 loops=1)
                                                -> Table scan on <temporary>  (cost=2.5..2.5 rows=0) (actual time=1.35e+6..1.36e+6 rows=6.76e+6 loops=1)
                                                    -> Temporary table  (cost=0..0 rows=0) (actual time=1.35e+6..1.35e+6 rows=6.76e+6 loops=1)
                                                        -> Window aggregate with buffering: sum(sales.quantity) OVER (PARTITION BY e.employeeid,e.firstname,e.lastname,p.productid,p.price )   (actual time=1.3e+6..1.35e+6 rows=6.76e+6 loops=1)
                                                            -> Sort: e.employeeid, e.firstname, e.lastname, p.productid, p.price  (actual time=1.3e+6..1.3e+6 rows=6.76e+6 loops=1)
                                                                -> Stream results  (cost=7.94e+6 rows=7.97e+6) (actual time=15.8..1.29e+6 rows=6.76e+6 loops=1)
                                                                    -> Nested loop inner join  (cost=7.94e+6 rows=7.97e+6) (actual time=15.8..1.29e+6 rows=6.76e+6 loops=1)
                                                                        -> Inner hash join (no condition)  (cost=1648 rows=11436) (actual time=0.931..15.7 rows=10396 loops=1)
                                                                            -> Table scan on e  (cost=0.00515 rows=23) (actual time=0.0107..0.0795 rows=23 loops=1)
                                                                            -> Hash
                                                                                -> Inner hash join (p.categoryid = c.categoryid)  (cost=504 rows=497) (actual time=0.327..0.843 rows=452 loops=1)
                                                                                    -> Table scan on p  (cost=0.866 rows=452) (actual time=0.293..0.731 rows=452 loops=1)
                                                                                    -> Hash
                                                                                        -> Covering index scan on c using PRIMARY  (cost=2.1 rows=11) (actual time=0.0117..0.0155 rows=11 loops=1)
                                                                        -> Index lookup on s using salesPersonID_productID_non_clustered_index (salespersonid=e.employeeid, productid=p.productid)  (cost=625 rows=697) (actual time=37.5..124 rows=650 loops=10396)
